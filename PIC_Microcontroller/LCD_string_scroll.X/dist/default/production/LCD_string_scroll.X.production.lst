

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 15 10:02:37 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    17   000000                     
    18                           ; Version 2.40
    19                           ; Generated 17/11/2021 GMT
    20                           ; 
    21                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4520 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53   000000                     _PORTD	set	3971
    54   000000                     _LATCbits	set	3979
    55   000000                     _TRISC	set	3988
    56   000000                     _TRISD	set	3989
    57                           
    58                           	psect	smallconst
    59   000600                     __psmallconst:
    60                           	callstack 0
    61   000600  00                 	db	0
    62   000601                     STR_1:
    63   000601  48                 	db	72	;'H'
    64   000602  65                 	db	101	;'e'
    65   000603  6C                 	db	108	;'l'
    66   000604  6C                 	db	108	;'l'
    67   000605  6F                 	db	111	;'o'
    68   000606  20                 	db	32
    69   000607  57                 	db	87	;'W'
    70   000608  6F                 	db	111	;'o'
    71   000609  72                 	db	114	;'r'
    72   00060A  6C                 	db	108	;'l'
    73   00060B  64                 	db	100	;'d'
    74   00060C  21                 	db	33
    75   00060D  00                 	db	0
    76   00060E  00                 	db	0	; dummy byte at the end
    77   000000                     
    78                           ; #config settings
    79                           
    80                           	psect	cinit
    81   000704                     __pcinit:
    82                           	callstack 0
    83   000704                     start_initialization:
    84                           	callstack 0
    85   000704                     __initialization:
    86                           	callstack 0
    87   000704                     end_of_initialization:
    88                           	callstack 0
    89   000704                     __end_of__initialization:
    90                           	callstack 0
    91   000704  0E00               	movlw	low (__Lsmallconst shr (0+16))
    92   000706  6EF8               	movwf	tblptru,c
    93   000708  0E06               	movlw	high __Lsmallconst
    94   00070A  6EF7               	movwf	tblptrh,c
    95   00070C  0100               	movlb	0
    96   00070E  EF08  F003         	goto	_main	;jump to C main() function
    97                           
    98                           	psect	cstackCOMRAM
    99   000001                     __pcstackCOMRAM:
   100                           	callstack 0
   101   000001                     ??_lcd_data:
   102   000001                     ??_lcd_cmd:
   103   000001                     
   104                           ; 1 bytes @ 0x0
   105   000001                     	ds	1
   106   000002                     lcd_data@d:
   107                           	callstack 0
   108   000002                     lcd_cmd@c:
   109                           	callstack 0
   110                           
   111                           ; 1 bytes @ 0x1
   112   000002                     	ds	1
   113   000003                     lcd_string@ptr:
   114                           	callstack 0
   115                           
   116                           ; 2 bytes @ 0x2
   117   000003                     	ds	2
   118   000005                     ??_main:
   119                           
   120                           ; 1 bytes @ 0x4
   121   000005                     	ds	2
   122   000007                     main@i:
   123                           	callstack 0
   124                           
   125                           ; 1 bytes @ 0x6
   126   000007                     	ds	1
   127                           
   128 ;;
   129 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   130 ;;
   131 ;; *************** function _main *****************
   132 ;; Defined at:
   133 ;;		line 46 in file "LCD_string_scroll.c"
   134 ;; Parameters:    Size  Location     Type
   135 ;;		None
   136 ;; Auto vars:     Size  Location     Type
   137 ;;  i               1    6[COMRAM] unsigned char 
   138 ;; Return value:  Size  Location     Type
   139 ;;                  1    wreg      void 
   140 ;; Registers used:
   141 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   142 ;; Tracked objects:
   143 ;;		On entry : 0/0
   144 ;;		On exit  : 0/0
   145 ;;		Unchanged: 0/0
   146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   147 ;;      Params:         0       0       0       0       0       0       0
   148 ;;      Locals:         1       0       0       0       0       0       0
   149 ;;      Temps:          2       0       0       0       0       0       0
   150 ;;      Totals:         3       0       0       0       0       0       0
   151 ;;Total ram usage:        3 bytes
   152 ;; Hardware stack levels required when called: 2
   153 ;; This function calls:
   154 ;;		_lcd_cmd
   155 ;;		_lcd_init
   156 ;;		_lcd_string
   157 ;; This function is called by:
   158 ;;		Startup code after reset
   159 ;; This function uses a non-reentrant model
   160 ;;
   161                           
   162                           	psect	text0
   163   000610                     __ptext0:
   164                           	callstack 0
   165   000610                     _main:
   166                           	callstack 29
   167   000610                     
   168                           ;LCD_string_scroll.c: 47:     TRISD = 0x00;
   169   000610  0E00               	movlw	0
   170   000612  6E95               	movwf	149,c	;volatile
   171                           
   172                           ;LCD_string_scroll.c: 48:     TRISC = 0x00;
   173   000614  0E00               	movlw	0
   174   000616  6E94               	movwf	148,c	;volatile
   175   000618                     
   176                           ;LCD_string_scroll.c: 50:     lcd_init();
   177   000618  EC54  F003         	call	_lcd_init	;wreg free
   178   00061C                     
   179                           ;LCD_string_scroll.c: 51:     lcd_cmd(0xc);
   180   00061C  0E0C               	movlw	12
   181   00061E  EC73  F003         	call	_lcd_cmd
   182   000622                     
   183                           ;LCD_string_scroll.c: 52:     lcd_cmd(0x80);
   184   000622  0E80               	movlw	128
   185   000624  EC73  F003         	call	_lcd_cmd
   186   000628                     
   187                           ;LCD_string_scroll.c: 54:     for(u8 i=0;i<16;i++)
   188   000628  0E00               	movlw	0
   189   00062A  6E07               	movwf	main@i^0,c
   190   00062C                     l790:
   191                           
   192                           ;LCD_string_scroll.c: 55:     {;LCD_string_scroll.c: 56:         lcd_cmd(0x80+i);
   193   00062C  5007               	movf	main@i^0,w,c
   194   00062E  0F80               	addlw	128
   195   000630  EC73  F003         	call	_lcd_cmd
   196   000634                     
   197                           ;LCD_string_scroll.c: 57:         lcd_string("Hello World!");
   198   000634  0E01               	movlw	low STR_1
   199   000636  6E03               	movwf	lcd_string@ptr^0,c
   200   000638  0E06               	movlw	high STR_1
   201   00063A  6E04               	movwf	(lcd_string@ptr+1)^0,c
   202   00063C  EC39  F003         	call	_lcd_string	;wreg free
   203   000640                     
   204                           ;LCD_string_scroll.c: 58:         _delay((unsigned long)((200)*(20000000/4000.0)));
   205   000640  0E06               	movlw	6
   206   000642  6E06               	movwf	(??_main+1)^0,c
   207   000644  0E13               	movlw	19
   208   000646  6E05               	movwf	??_main^0,c
   209   000648  0EAE               	movlw	174
   210   00064A                     u57:
   211   00064A  2EE8               	decfsz	wreg,f,c
   212   00064C  D7FE               	bra	u57
   213   00064E  2E05               	decfsz	??_main^0,f,c
   214   000650  D7FC               	bra	u57
   215   000652  2E06               	decfsz	(??_main+1)^0,f,c
   216   000654  D7FA               	bra	u57
   217   000656                     
   218                           ;LCD_string_scroll.c: 59:         lcd_cmd(0x1);
   219   000656  0E01               	movlw	1
   220   000658  EC73  F003         	call	_lcd_cmd
   221   00065C                     
   222                           ;LCD_string_scroll.c: 60:     }
   223   00065C  2A07               	incf	main@i^0,f,c
   224   00065E  0E0F               	movlw	15
   225   000660  6407               	cpfsgt	main@i^0,c
   226   000662  EF35  F003         	goto	u41
   227   000666  EF37  F003         	goto	u40
   228   00066A                     u41:
   229   00066A  EF16  F003         	goto	l790
   230   00066E                     u40:
   231   00066E  EF00  F000         	goto	start
   232   000672                     __end_of_main:
   233                           	callstack 0
   234                           
   235 ;; *************** function _lcd_string *****************
   236 ;; Defined at:
   237 ;;		line 22 in file "LCD_string_scroll.c"
   238 ;; Parameters:    Size  Location     Type
   239 ;;  ptr             2    2[COMRAM] PTR unsigned char 
   240 ;;		 -> STR_1(13), 
   241 ;; Auto vars:     Size  Location     Type
   242 ;;		None
   243 ;; Return value:  Size  Location     Type
   244 ;;                  1    wreg      void 
   245 ;; Registers used:
   246 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   247 ;; Tracked objects:
   248 ;;		On entry : 0/0
   249 ;;		On exit  : 0/0
   250 ;;		Unchanged: 0/0
   251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   252 ;;      Params:         2       0       0       0       0       0       0
   253 ;;      Locals:         0       0       0       0       0       0       0
   254 ;;      Temps:          0       0       0       0       0       0       0
   255 ;;      Totals:         2       0       0       0       0       0       0
   256 ;;Total ram usage:        2 bytes
   257 ;; Hardware stack levels used: 1
   258 ;; Hardware stack levels required when called: 1
   259 ;; This function calls:
   260 ;;		_lcd_data
   261 ;; This function is called by:
   262 ;;		_main
   263 ;; This function uses a non-reentrant model
   264 ;;
   265                           
   266                           	psect	text1
   267   000672                     __ptext1:
   268                           	callstack 0
   269   000672                     _lcd_string:
   270                           	callstack 29
   271   000672                     
   272                           ;LCD_string_scroll.c: 23:  while(*ptr!=0){
   273   000672  EF45  F003         	goto	l774
   274   000676                     l770:
   275                           
   276                           ;LCD_string_scroll.c: 24:   lcd_data(*ptr);
   277   000676  C003  FFF6         	movff	lcd_string@ptr,tblptrl
   278   00067A  C004  FFF7         	movff	lcd_string@ptr+1,tblptrh
   279   00067E                     	if	0	;tblptru may be non-zero
   280   00067E                     	endif
   281   00067E                     	if	0	;tblptru may be non-zero
   282   00067E                     	endif
   283   00067E  0008               	tblrd		*
   284   000680  50F5               	movf	tablat,w,c
   285   000682  EC64  F003         	call	_lcd_data
   286   000686                     
   287                           ;LCD_string_scroll.c: 25:   ptr++;
   288   000686  4A03               	infsnz	lcd_string@ptr^0,f,c
   289   000688  2A04               	incf	(lcd_string@ptr+1)^0,f,c
   290   00068A                     l774:
   291                           
   292                           ;LCD_string_scroll.c: 23:  while(*ptr!=0){
   293   00068A  C003  FFF6         	movff	lcd_string@ptr,tblptrl
   294   00068E  C004  FFF7         	movff	lcd_string@ptr+1,tblptrh
   295   000692                     	if	0	;tblptru may be non-zero
   296   000692                     	endif
   297   000692                     	if	0	;tblptru may be non-zero
   298   000692                     	endif
   299   000692  0008               	tblrd		*
   300   000694  50F5               	movf	tablat,w,c
   301   000696  0900               	iorlw	0
   302   000698  A4D8               	btfss	status,2,c
   303   00069A  EF51  F003         	goto	u31
   304   00069E  EF53  F003         	goto	u30
   305   0006A2                     u31:
   306   0006A2  EF3B  F003         	goto	l770
   307   0006A6                     u30:
   308   0006A6  0012               	return		;funcret
   309   0006A8                     __end_of_lcd_string:
   310                           	callstack 0
   311                           
   312 ;; *************** function _lcd_data *****************
   313 ;; Defined at:
   314 ;;		line 12 in file "LCD_string_scroll.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;  d               1    wreg     unsigned char 
   317 ;; Auto vars:     Size  Location     Type
   318 ;;  d               1    1[COMRAM] unsigned char 
   319 ;; Return value:  Size  Location     Type
   320 ;;                  1    wreg      void 
   321 ;; Registers used:
   322 ;;		wreg, status,2, cstack
   323 ;; Tracked objects:
   324 ;;		On entry : 0/0
   325 ;;		On exit  : 0/0
   326 ;;		Unchanged: 0/0
   327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   328 ;;      Params:         0       0       0       0       0       0       0
   329 ;;      Locals:         1       0       0       0       0       0       0
   330 ;;      Temps:          1       0       0       0       0       0       0
   331 ;;      Totals:         2       0       0       0       0       0       0
   332 ;;Total ram usage:        2 bytes
   333 ;; Hardware stack levels used: 1
   334 ;; This function calls:
   335 ;;		Nothing
   336 ;; This function is called by:
   337 ;;		_lcd_string
   338 ;; This function uses a non-reentrant model
   339 ;;
   340                           
   341                           	psect	text2
   342   0006C8                     __ptext2:
   343                           	callstack 0
   344   0006C8                     _lcd_data:
   345                           	callstack 29
   346                           
   347                           ;incstack = 0
   348                           ;lcd_data@d stored from wreg
   349   0006C8  6E02               	movwf	lcd_data@d^0,c
   350   0006CA                     
   351                           ;LCD_string_scroll.c: 12: void lcd_data(u8 d);LCD_string_scroll.c: 13: {;LCD_string_scro
      +                          ll.c: 14:   PORTD=d;
   352   0006CA  C002  FF83         	movff	lcd_data@d,3971	;volatile
   353   0006CE                     
   354                           ;LCD_string_scroll.c: 15:   LATCbits.LC1=1;
   355   0006CE  828B               	bsf	139,1,c	;volatile
   356   0006D0                     
   357                           ;LCD_string_scroll.c: 16:   LATCbits.LC0=0;
   358   0006D0  908B               	bcf	139,0,c	;volatile
   359   0006D2                     
   360                           ;LCD_string_scroll.c: 17:   LATCbits.LC2=1;
   361   0006D2  848B               	bsf	139,2,c	;volatile
   362   0006D4                     
   363                           ;LCD_string_scroll.c: 18:   _delay((unsigned long)((2)*(20000000/4000.0)));
   364   0006D4  0E0D               	movlw	13
   365   0006D6  6E01               	movwf	??_lcd_data^0,c
   366   0006D8  0EFC               	movlw	252
   367   0006DA                     u67:
   368   0006DA  2EE8               	decfsz	wreg,f,c
   369   0006DC  D7FE               	bra	u67
   370   0006DE  2E01               	decfsz	??_lcd_data^0,f,c
   371   0006E0  D7FC               	bra	u67
   372   0006E2                     
   373                           ;LCD_string_scroll.c: 19:   LATCbits.LC2=0;
   374   0006E2  948B               	bcf	139,2,c	;volatile
   375   0006E4  0012               	return		;funcret
   376   0006E6                     __end_of_lcd_data:
   377                           	callstack 0
   378                           
   379 ;; *************** function _lcd_init *****************
   380 ;; Defined at:
   381 ;;		line 38 in file "LCD_string_scroll.c"
   382 ;; Parameters:    Size  Location     Type
   383 ;;		None
   384 ;; Auto vars:     Size  Location     Type
   385 ;;		None
   386 ;; Return value:  Size  Location     Type
   387 ;;                  1    wreg      void 
   388 ;; Registers used:
   389 ;;		wreg, status,2, cstack
   390 ;; Tracked objects:
   391 ;;		On entry : 0/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   395 ;;      Params:         0       0       0       0       0       0       0
   396 ;;      Locals:         0       0       0       0       0       0       0
   397 ;;      Temps:          0       0       0       0       0       0       0
   398 ;;      Totals:         0       0       0       0       0       0       0
   399 ;;Total ram usage:        0 bytes
   400 ;; Hardware stack levels used: 1
   401 ;; Hardware stack levels required when called: 1
   402 ;; This function calls:
   403 ;;		_lcd_cmd
   404 ;; This function is called by:
   405 ;;		_main
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409                           	psect	text3
   410   0006A8                     __ptext3:
   411                           	callstack 0
   412   0006A8                     _lcd_init:
   413                           	callstack 29
   414   0006A8                     
   415                           ;LCD_string_scroll.c: 40:   lcd_cmd(0x2);
   416   0006A8  0E02               	movlw	2
   417   0006AA  EC73  F003         	call	_lcd_cmd
   418                           
   419                           ;LCD_string_scroll.c: 41:   lcd_cmd(0x38);
   420   0006AE  0E38               	movlw	56
   421   0006B0  EC73  F003         	call	_lcd_cmd
   422                           
   423                           ;LCD_string_scroll.c: 42:   lcd_cmd(0xE);
   424   0006B4  0E0E               	movlw	14
   425   0006B6  EC73  F003         	call	_lcd_cmd
   426                           
   427                           ;LCD_string_scroll.c: 43:         lcd_cmd(0x6);
   428   0006BA  0E06               	movlw	6
   429   0006BC  EC73  F003         	call	_lcd_cmd
   430                           
   431                           ;LCD_string_scroll.c: 44:   lcd_cmd(0x1);
   432   0006C0  0E01               	movlw	1
   433   0006C2  EC73  F003         	call	_lcd_cmd
   434   0006C6  0012               	return		;funcret
   435   0006C8                     __end_of_lcd_init:
   436                           	callstack 0
   437                           
   438 ;; *************** function _lcd_cmd *****************
   439 ;; Defined at:
   440 ;;		line 29 in file "LCD_string_scroll.c"
   441 ;; Parameters:    Size  Location     Type
   442 ;;  c               1    wreg     unsigned char 
   443 ;; Auto vars:     Size  Location     Type
   444 ;;  c               1    1[COMRAM] unsigned char 
   445 ;; Return value:  Size  Location     Type
   446 ;;                  1    wreg      void 
   447 ;; Registers used:
   448 ;;		wreg, status,2, cstack
   449 ;; Tracked objects:
   450 ;;		On entry : 0/0
   451 ;;		On exit  : 0/0
   452 ;;		Unchanged: 0/0
   453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   454 ;;      Params:         0       0       0       0       0       0       0
   455 ;;      Locals:         1       0       0       0       0       0       0
   456 ;;      Temps:          1       0       0       0       0       0       0
   457 ;;      Totals:         2       0       0       0       0       0       0
   458 ;;Total ram usage:        2 bytes
   459 ;; Hardware stack levels used: 1
   460 ;; This function calls:
   461 ;;		Nothing
   462 ;; This function is called by:
   463 ;;		_lcd_init
   464 ;;		_main
   465 ;; This function uses a non-reentrant model
   466 ;;
   467                           
   468                           	psect	text4
   469   0006E6                     __ptext4:
   470                           	callstack 0
   471   0006E6                     _lcd_cmd:
   472                           	callstack 29
   473                           
   474                           ;incstack = 0
   475                           ;lcd_cmd@c stored from wreg
   476   0006E6  6E02               	movwf	lcd_cmd@c^0,c
   477   0006E8                     
   478                           ;LCD_string_scroll.c: 29: void lcd_cmd(u8 c);LCD_string_scroll.c: 30: {;LCD_string_scrol
      +                          l.c: 31:   PORTD=c;
   479   0006E8  C002  FF83         	movff	lcd_cmd@c,3971	;volatile
   480   0006EC                     
   481                           ;LCD_string_scroll.c: 32:   LATCbits.LC1=0;
   482   0006EC  928B               	bcf	139,1,c	;volatile
   483   0006EE                     
   484                           ;LCD_string_scroll.c: 33:   LATCbits.LC0=0;
   485   0006EE  908B               	bcf	139,0,c	;volatile
   486   0006F0                     
   487                           ;LCD_string_scroll.c: 34:   LATCbits.LC2=1;
   488   0006F0  848B               	bsf	139,2,c	;volatile
   489   0006F2                     
   490                           ;LCD_string_scroll.c: 35:   _delay((unsigned long)((2)*(20000000/4000.0)));
   491   0006F2  0E0D               	movlw	13
   492   0006F4  6E01               	movwf	??_lcd_cmd^0,c
   493   0006F6  0EFC               	movlw	252
   494   0006F8                     u77:
   495   0006F8  2EE8               	decfsz	wreg,f,c
   496   0006FA  D7FE               	bra	u77
   497   0006FC  2E01               	decfsz	??_lcd_cmd^0,f,c
   498   0006FE  D7FC               	bra	u77
   499   000700                     
   500                           ;LCD_string_scroll.c: 36:   LATCbits.LC2=0;
   501   000700  948B               	bcf	139,2,c	;volatile
   502   000702  0012               	return		;funcret
   503   000704                     __end_of_lcd_cmd:
   504                           	callstack 0
   505                           
   506                           	psect	rparam
   507   000000                     
   508                           	psect	idloc
   509                           
   510                           ;Config register IDLOC0 @ 0x200000
   511                           ;	unspecified, using default values
   512   200000                     	org	2097152
   513   200000  FF                 	db	255
   514                           
   515                           ;Config register IDLOC1 @ 0x200001
   516                           ;	unspecified, using default values
   517   200001                     	org	2097153
   518   200001  FF                 	db	255
   519                           
   520                           ;Config register IDLOC2 @ 0x200002
   521                           ;	unspecified, using default values
   522   200002                     	org	2097154
   523   200002  FF                 	db	255
   524                           
   525                           ;Config register IDLOC3 @ 0x200003
   526                           ;	unspecified, using default values
   527   200003                     	org	2097155
   528   200003  FF                 	db	255
   529                           
   530                           ;Config register IDLOC4 @ 0x200004
   531                           ;	unspecified, using default values
   532   200004                     	org	2097156
   533   200004  FF                 	db	255
   534                           
   535                           ;Config register IDLOC5 @ 0x200005
   536                           ;	unspecified, using default values
   537   200005                     	org	2097157
   538   200005  FF                 	db	255
   539                           
   540                           ;Config register IDLOC6 @ 0x200006
   541                           ;	unspecified, using default values
   542   200006                     	org	2097158
   543   200006  FF                 	db	255
   544                           
   545                           ;Config register IDLOC7 @ 0x200007
   546                           ;	unspecified, using default values
   547   200007                     	org	2097159
   548   200007  FF                 	db	255
   549                           
   550                           	psect	config
   551                           
   552                           ; Padding undefined space
   553   300000                     	org	3145728
   554   300000  FF                 	db	255
   555                           
   556                           ;Config register CONFIG1H @ 0x300001
   557                           ;	Oscillator Selection bits
   558                           ;	OSC = HS, HS oscillator
   559                           ;	Fail-Safe Clock Monitor Enable bit
   560                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   561                           ;	Internal/External Oscillator Switchover bit
   562                           ;	IESO = OFF, Oscillator Switchover mode disabled
   563   300001                     	org	3145729
   564   300001  02                 	db	2
   565                           
   566                           ;Config register CONFIG2L @ 0x300002
   567                           ;	Power-up Timer Enable bit
   568                           ;	PWRT = OFF, PWRT disabled
   569                           ;	Brown-out Reset Enable bits
   570                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   571                           ;	Brown Out Reset Voltage bits
   572                           ;	BORV = 3, Minimum setting
   573   300002                     	org	3145730
   574   300002  1F                 	db	31
   575                           
   576                           ;Config register CONFIG2H @ 0x300003
   577                           ;	Watchdog Timer Enable bit
   578                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   579                           ;	Watchdog Timer Postscale Select bits
   580                           ;	WDTPS = 32768, 1:32768
   581   300003                     	org	3145731
   582   300003  1E                 	db	30
   583                           
   584                           ; Padding undefined space
   585   300004                     	org	3145732
   586   300004  FF                 	db	255
   587                           
   588                           ;Config register CONFIG3H @ 0x300005
   589                           ;	CCP2 MUX bit
   590                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
   591                           ;	PORTB A/D Enable bit
   592                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   593                           ;	Low-Power Timer1 Oscillator Enable bit
   594                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   595                           ;	MCLR Pin Enable bit
   596                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
   597   300005                     	org	3145733
   598   300005  01                 	db	1
   599                           
   600                           ;Config register CONFIG4L @ 0x300006
   601                           ;	Stack Full/Underflow Reset Enable bit
   602                           ;	STVREN = ON, Stack full/underflow will cause Reset
   603                           ;	Single-Supply ICSP Enable bit
   604                           ;	LVP = OFF, Single-Supply ICSP disabled
   605                           ;	Extended Instruction Set Enable bit
   606                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   607                           ;	Background Debugger Enable bit
   608                           ;	DEBUG = 0x1, unprogrammed default
   609   300006                     	org	3145734
   610   300006  81                 	db	129
   611                           
   612                           ; Padding undefined space
   613   300007                     	org	3145735
   614   300007  FF                 	db	255
   615                           
   616                           ;Config register CONFIG5L @ 0x300008
   617                           ;	Code Protection bit
   618                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
   619                           ;	Code Protection bit
   620                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
   621                           ;	Code Protection bit
   622                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
   623                           ;	Code Protection bit
   624                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
   625   300008                     	org	3145736
   626   300008  0F                 	db	15
   627                           
   628                           ;Config register CONFIG5H @ 0x300009
   629                           ;	Boot Block Code Protection bit
   630                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
   631                           ;	Data EEPROM Code Protection bit
   632                           ;	CPD = OFF, Data EEPROM not code-protected
   633   300009                     	org	3145737
   634   300009  C0                 	db	192
   635                           
   636                           ;Config register CONFIG6L @ 0x30000A
   637                           ;	Write Protection bit
   638                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
   639                           ;	Write Protection bit
   640                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
   641                           ;	Write Protection bit
   642                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
   643                           ;	Write Protection bit
   644                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
   645   30000A                     	org	3145738
   646   30000A  0F                 	db	15
   647                           
   648                           ;Config register CONFIG6H @ 0x30000B
   649                           ;	Configuration Register Write Protection bit
   650                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
   651                           ;	Boot Block Write Protection bit
   652                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
   653                           ;	Data EEPROM Write Protection bit
   654                           ;	WRTD = OFF, Data EEPROM not write-protected
   655   30000B                     	org	3145739
   656   30000B  E0                 	db	224
   657                           
   658                           ;Config register CONFIG7L @ 0x30000C
   659                           ;	Table Read Protection bit
   660                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
   661                           ;	Table Read Protection bit
   662                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
   663                           ;	Table Read Protection bit
   664                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
   665                           ;	Table Read Protection bit
   666                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
   667   30000C                     	org	3145740
   668   30000C  0F                 	db	15
   669                           
   670                           ;Config register CONFIG7H @ 0x30000D
   671                           ;	Boot Block Table Read Protection bit
   672                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
   673   30000D                     	org	3145741
   674   30000D  40                 	db	64
   675                           tosu	equ	0xFFF
   676                           tosh	equ	0xFFE
   677                           tosl	equ	0xFFD
   678                           stkptr	equ	0xFFC
   679                           pclatu	equ	0xFFB
   680                           pclath	equ	0xFFA
   681                           pcl	equ	0xFF9
   682                           tblptru	equ	0xFF8
   683                           tblptrh	equ	0xFF7
   684                           tblptrl	equ	0xFF6
   685                           tablat	equ	0xFF5
   686                           prodh	equ	0xFF4
   687                           prodl	equ	0xFF3
   688                           indf0	equ	0xFEF
   689                           postinc0	equ	0xFEE
   690                           postdec0	equ	0xFED
   691                           preinc0	equ	0xFEC
   692                           plusw0	equ	0xFEB
   693                           fsr0h	equ	0xFEA
   694                           fsr0l	equ	0xFE9
   695                           wreg	equ	0xFE8
   696                           indf1	equ	0xFE7
   697                           postinc1	equ	0xFE6
   698                           postdec1	equ	0xFE5
   699                           preinc1	equ	0xFE4
   700                           plusw1	equ	0xFE3
   701                           fsr1h	equ	0xFE2
   702                           fsr1l	equ	0xFE1
   703                           bsr	equ	0xFE0
   704                           indf2	equ	0xFDF
   705                           postinc2	equ	0xFDE
   706                           postdec2	equ	0xFDD
   707                           preinc2	equ	0xFDC
   708                           plusw2	equ	0xFDB
   709                           fsr2h	equ	0xFDA
   710                           fsr2l	equ	0xFD9
   711                           status	equ	0xFD8

Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127      7       7
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcd_string@ptr	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_lcd_string
    _lcd_string->_lcd_data
    _lcd_init->_lcd_cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     234
                                              4 COMRAM     3     3      0
                            _lcd_cmd
                           _lcd_init
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           2     0      2     136
                                              2 COMRAM     2     0      2
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      15
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_cmd
   _lcd_init
     _lcd_cmd
   _lcd_string
     _lcd_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      7       7       1        5.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBIGSFRhhh        6A      0       0      16        0.0%
BITBIGSFRhhl         8      0       0      17        0.0%
BITBIGSFRhl          7      0       0      18        0.0%
BITBIGSFRl           3      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             5FF      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 15 10:02:37 2022

                     l13 06E4                       l22 0702                       l32 066E  
                     l25 06C6                       l19 06A6                       u30 06A6  
                     u31 06A2                       u40 066E                       u41 066A  
                     u57 064A                       u67 06DA                       u77 06F8  
                    l710 06CE                      l720 06E8                      l712 06D0  
                    l800 065E                      l730 0700                      l722 06EC  
                    l714 06D2                      l724 06EE                      l740 06A8  
                    l716 06D4                      l708 06CA                      l726 06F0  
                    l718 06E2                      l728 06F2                      l770 0676  
                    l772 0686                      l780 061C                      l774 068A  
                    l790 062C                      l782 0622                      l768 0672  
                    l792 0634                      l784 0628                      l776 0610  
                    l794 0640                      l778 0618                      l796 0656  
                    l798 065C                      wreg 000FE8                     STR_1 0601  
                   _main 0610                     start 0000             ___param_bank 000000  
                  ?_main 0001                    _PORTD 000F83                    _TRISC 000F94  
                  _TRISD 000F95          __end_of_lcd_cmd 0704                    main@i 0007  
                  tablat 000FF5                    status 000FD8          __initialization 0704  
           __end_of_main 0672                   ??_main 0005            __activetblptr 000001  
       __end_of_lcd_data 06E6         __end_of_lcd_init 06C8                   isa$std 000001  
              ??_lcd_cmd 0001             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8            lcd_string@ptr 0003  
             __accesstop 0080  __end_of__initialization 0704            ___rparam_used 000001  
         __pcstackCOMRAM 0001                ?_lcd_data 0001               _lcd_string 0672  
              ?_lcd_init 0001                  __Hparam 0000                  __Lparam 0000  
           __psmallconst 0600                  __pcinit 0704                  __ramtop 0600  
                __ptext0 0610                  __ptext1 0672                  __ptext2 06C8  
                __ptext3 06A8                  __ptext4 06E6                  _lcd_cmd 06E6  
             ??_lcd_data 0001               ??_lcd_init 0003     end_of_initialization 0704  
            ?_lcd_string 0003      start_initialization 0704                 ?_lcd_cmd 0001  
            __smallconst 0600                 _LATCbits 000F8B                lcd_data@d 0002  
           ??_lcd_string 0005                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0600       __end_of_lcd_string 06A8                 _lcd_data 06C8  
               _lcd_init 06A8                 isa$xinst 000000                 lcd_cmd@c 0002  
