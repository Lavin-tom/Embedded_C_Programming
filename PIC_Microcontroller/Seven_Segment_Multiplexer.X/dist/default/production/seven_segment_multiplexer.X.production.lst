

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Dec 14 21:34:21 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    21                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    23   000000                     
    24                           ; Version 2.40
    25                           ; Generated 17/11/2021 GMT
    26                           ; 
    27                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4520 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59   000000                     
    60                           	psect	smallconst
    61   000600                     __psmallconst:
    62                           	callstack 0
    63   000600  00                 	db	0
    64   000601                     _seg_data:
    65                           	callstack 0
    66   000601  E7                 	db	231
    67   000602  21                 	db	33
    68   000603  CB                 	db	203
    69   000604  6B                 	db	107
    70   000605  2D                 	db	45
    71   000606  6E                 	db	110
    72   000607  EC                 	db	236
    73   000608  23                 	db	35
    74   000609  EF                 	db	239
    75   00060A  6F                 	db	111
    76   00060B                     __end_of_seg_data:
    77                           	callstack 0
    78   000000                     _TMR0L	set	4054
    79   000000                     _TMR0H	set	4055
    80   000000                     _PORTA	set	3968
    81   000000                     _PORTD	set	3971
    82   000000                     _TRISA	set	3986
    83   000000                     _TRISD	set	3989
    84   000000                     _ADCON1	set	4033
    85   000000                     _RCONbits	set	4048
    86   000000                     _T0CONbits	set	4053
    87   000000                     _INTCONbits	set	4082
    88   00060B  00                 	db	0	; dummy byte at the end
    89   000000                     
    90                           ; #config settings
    91                           
    92                           	psect	cinit
    93   000942                     __pcinit:
    94                           	callstack 0
    95   000942                     start_initialization:
    96                           	callstack 0
    97   000942                     __initialization:
    98                           	callstack 0
    99                           
   100                           ; Clear objects allocated to COMRAM (8 bytes)
   101   000942  EE00  F016         	lfsr	0,__pbssCOMRAM
   102   000946  0E08               	movlw	8
   103   000948                     clear_0:
   104   000948  6AEE               	clrf	postinc0,c
   105   00094A  06E8               	decf	wreg,f,c
   106   00094C  E1FD               	bnz	clear_0
   107   00094E                     end_of_initialization:
   108                           	callstack 0
   109   00094E                     __end_of__initialization:
   110                           	callstack 0
   111   00094E  901E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   112   000950  921E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   113   000952  0E00               	movlw	low (__Lmediumconst shr (0+16))
   114   000954  6EF8               	movwf	tblptru,c
   115   000956  0100               	movlb	0
   116   000958  EF0D  F004         	goto	_main	;jump to C main() function
   117                           
   118                           	psect	bssCOMRAM
   119   000016                     __pbssCOMRAM:
   120                           	callstack 0
   121   000016                     _val:
   122                           	callstack 0
   123   000016                     	ds	2
   124   000018                     _count:
   125                           	callstack 0
   126   000018                     	ds	2
   127   00001A                     _BCDNum:
   128                           	callstack 0
   129   00001A                     	ds	4
   130                           
   131                           	psect	cstackCOMRAM
   132   000001                     __pcstackCOMRAM:
   133                           	callstack 0
   134   000001                     ??_seg_multi:
   135   000001                     
   136                           ; 1 bytes @ 0x0
   137   000001                     	ds	2
   138   000003                     ??_seg_display:
   139                           
   140                           ; 1 bytes @ 0x2
   141   000003                     	ds	4
   142   000007                     ?___lwdiv:
   143                           	callstack 0
   144   000007                     ?___lwmod:
   145                           	callstack 0
   146   000007                     ___lwdiv@dividend:
   147                           	callstack 0
   148   000007                     ___lwmod@dividend:
   149                           	callstack 0
   150                           
   151                           ; 2 bytes @ 0x6
   152   000007                     	ds	2
   153   000009                     ___lwdiv@divisor:
   154                           	callstack 0
   155   000009                     ___lwmod@divisor:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x8
   159   000009                     	ds	2
   160   00000B                     ___lwmod@counter:
   161                           	callstack 0
   162   00000B                     ___lwdiv@quotient:
   163                           	callstack 0
   164                           
   165                           ; 2 bytes @ 0xA
   166   00000B                     	ds	2
   167   00000D                     ___lwdiv@counter:
   168                           	callstack 0
   169                           
   170                           ; 1 bytes @ 0xC
   171   00000D                     	ds	1
   172   00000E                     Hex_to_bcd@count:
   173                           	callstack 0
   174                           
   175                           ; 2 bytes @ 0xD
   176   00000E                     	ds	2
   177   000010                     Hex_to_bcd@BCDNum:
   178                           	callstack 0
   179                           
   180                           ; 2 bytes @ 0xF
   181   000010                     	ds	2
   182   000012                     Hex_to_bcd@i:
   183                           	callstack 0
   184                           
   185                           ; 2 bytes @ 0x11
   186   000012                     	ds	2
   187   000014                     ??_main:
   188                           
   189                           ; 1 bytes @ 0x13
   190   000014                     	ds	2
   191                           
   192 ;;
   193 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   194 ;;
   195 ;; *************** function _main *****************
   196 ;; Defined at:
   197 ;;		line 88 in file "seven_segment_multiplexer.c"
   198 ;; Parameters:    Size  Location     Type
   199 ;;		None
   200 ;; Auto vars:     Size  Location     Type
   201 ;;		None
   202 ;; Return value:  Size  Location     Type
   203 ;;                  1    wreg      void 
   204 ;; Registers used:
   205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   206 ;; Tracked objects:
   207 ;;		On entry : 0/0
   208 ;;		On exit  : 0/0
   209 ;;		Unchanged: 0/0
   210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   211 ;;      Params:         0       0       0       0       0       0       0
   212 ;;      Locals:         0       0       0       0       0       0       0
   213 ;;      Temps:          2       0       0       0       0       0       0
   214 ;;      Totals:         2       0       0       0       0       0       0
   215 ;;Total ram usage:        2 bytes
   216 ;; Hardware stack levels required when called: 4
   217 ;; This function calls:
   218 ;;		_GPIO_Init
   219 ;;		_Hex_to_bcd
   220 ;;		_Timer0_Init
   221 ;; This function is called by:
   222 ;;		Startup code after reset
   223 ;; This function uses a non-reentrant model
   224 ;;
   225                           
   226                           	psect	text0
   227   00081A                     __ptext0:
   228                           	callstack 0
   229   00081A                     _main:
   230                           	callstack 27
   231   00081A                     
   232                           ;seven_segment_multiplexer.c: 90:     GPIO_Init();
   233   00081A  ECAE  F004         	call	_GPIO_Init	;wreg free
   234                           
   235                           ;seven_segment_multiplexer.c: 91:     Timer0_Init();
   236   00081E  EC92  F004         	call	_Timer0_Init	;wreg free
   237   000822                     
   238                           ;seven_segment_multiplexer.c: 92:     count=0;
   239   000822  0E00               	movlw	0
   240   000824  6E19               	movwf	(_count+1)^0,c
   241   000826  0E00               	movlw	0
   242   000828  6E18               	movwf	_count^0,c
   243   00082A                     l926:
   244                           
   245                           ;seven_segment_multiplexer.c: 94:     {;seven_segment_multiplexer.c: 95:         count++
      +                          ;
   246   00082A  4A18               	infsnz	_count^0,f,c
   247   00082C  2A19               	incf	(_count+1)^0,f,c
   248   00082E                     
   249                           ;seven_segment_multiplexer.c: 96:         if(count>9999)
   250   00082E  0E10               	movlw	16
   251   000830  5C18               	subwf	_count^0,w,c
   252   000832  0E27               	movlw	39
   253   000834  5819               	subwfb	(_count+1)^0,w,c
   254   000836  A0D8               	btfss	status,0,c
   255   000838  EF20  F004         	goto	u161
   256   00083C  EF22  F004         	goto	u160
   257   000840                     u161:
   258   000840  EF26  F004         	goto	l932
   259   000844                     u160:
   260   000844                     
   261                           ;seven_segment_multiplexer.c: 97:             count=0;
   262   000844  0E00               	movlw	0
   263   000846  6E19               	movwf	(_count+1)^0,c
   264   000848  0E00               	movlw	0
   265   00084A  6E18               	movwf	_count^0,c
   266   00084C                     l932:
   267                           
   268                           ;seven_segment_multiplexer.c: 98:         Hex_to_bcd(count,BCDNum);
   269   00084C  C018  F00E         	movff	_count,Hex_to_bcd@count
   270   000850  C019  F00F         	movff	_count+1,Hex_to_bcd@count+1
   271   000854  0E1A               	movlw	low _BCDNum
   272   000856  6E10               	movwf	Hex_to_bcd@BCDNum^0,c
   273   000858  0E00               	movlw	high _BCDNum
   274   00085A  6E11               	movwf	(Hex_to_bcd@BCDNum+1)^0,c
   275   00085C  EC06  F003         	call	_Hex_to_bcd	;wreg free
   276   000860                     
   277                           ;seven_segment_multiplexer.c: 99:         _delay((unsigned long)((100)*(20000000/4000.0)
      +                          ));
   278   000860  0E03               	movlw	3
   279   000862  6E15               	movwf	(??_main+1)^0,c
   280   000864  0E8A               	movlw	138
   281   000866  6E14               	movwf	??_main^0,c
   282   000868  0E56               	movlw	86
   283   00086A                     u177:
   284   00086A  2EE8               	decfsz	wreg,f,c
   285   00086C  D7FE               	bra	u177
   286   00086E  2E14               	decfsz	??_main^0,f,c
   287   000870  D7FC               	bra	u177
   288   000872  2E15               	decfsz	(??_main+1)^0,f,c
   289   000874  D7FA               	bra	u177
   290   000876  EF15  F004         	goto	l926
   291   00087A  EF07  F000         	goto	start
   292   00087E                     __end_of_main:
   293                           	callstack 0
   294                           
   295 ;; *************** function _Timer0_Init *****************
   296 ;; Defined at:
   297 ;;		line 18 in file "seven_segment_multiplexer.c"
   298 ;; Parameters:    Size  Location     Type
   299 ;;		None
   300 ;; Auto vars:     Size  Location     Type
   301 ;;		None
   302 ;; Return value:  Size  Location     Type
   303 ;;                  1    wreg      void 
   304 ;; Registers used:
   305 ;;		wreg, status,2
   306 ;; Tracked objects:
   307 ;;		On entry : 0/0
   308 ;;		On exit  : 0/0
   309 ;;		Unchanged: 0/0
   310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   311 ;;      Params:         0       0       0       0       0       0       0
   312 ;;      Locals:         0       0       0       0       0       0       0
   313 ;;      Temps:          0       0       0       0       0       0       0
   314 ;;      Totals:         0       0       0       0       0       0       0
   315 ;;Total ram usage:        0 bytes
   316 ;; Hardware stack levels used: 1
   317 ;; Hardware stack levels required when called: 2
   318 ;; This function calls:
   319 ;;		Nothing
   320 ;; This function is called by:
   321 ;;		_main
   322 ;; This function uses a non-reentrant model
   323 ;;
   324                           
   325                           	psect	text1
   326   000924                     __ptext1:
   327                           	callstack 0
   328   000924                     _Timer0_Init:
   329                           	callstack 28
   330   000924                     
   331                           ;seven_segment_multiplexer.c: 20:     T0CONbits.T0CS = 0;
   332   000924  9AD5               	bcf	213,5,c	;volatile
   333                           
   334                           ;seven_segment_multiplexer.c: 21:     T0CONbits.T08BIT = 0;
   335   000926  9CD5               	bcf	213,6,c	;volatile
   336                           
   337                           ;seven_segment_multiplexer.c: 22:     T0CONbits.PSA = 1;
   338   000928  86D5               	bsf	213,3,c	;volatile
   339   00092A                     
   340                           ;seven_segment_multiplexer.c: 23:     T0CONbits.T0PS = 0b000;
   341   00092A  0EF8               	movlw	-8
   342   00092C  16D5               	andwf	213,f,c	;volatile
   343                           
   344                           ;seven_segment_multiplexer.c: 24:     TMR0H = 0xCF;
   345   00092E  0ECF               	movlw	207
   346   000930  6ED7               	movwf	215,c	;volatile
   347                           
   348                           ;seven_segment_multiplexer.c: 25:     TMR0L = 0x2B;
   349   000932  0E2B               	movlw	43
   350   000934  6ED6               	movwf	214,c	;volatile
   351   000936                     
   352                           ;seven_segment_multiplexer.c: 27:     RCONbits.IPEN = 0;
   353   000936  9ED0               	bcf	208,7,c	;volatile
   354   000938                     
   355                           ;seven_segment_multiplexer.c: 28:     INTCONbits.TMR0IF = 0;
   356   000938  94F2               	bcf	242,2,c	;volatile
   357   00093A                     
   358                           ;seven_segment_multiplexer.c: 29:     INTCONbits.TMR0IE = 1;
   359   00093A  8AF2               	bsf	242,5,c	;volatile
   360   00093C                     
   361                           ;seven_segment_multiplexer.c: 30:     INTCONbits.GIE = 1;
   362   00093C  8EF2               	bsf	242,7,c	;volatile
   363   00093E                     
   364                           ;seven_segment_multiplexer.c: 31:     T0CONbits.TMR0ON = 1;
   365   00093E  8ED5               	bsf	213,7,c	;volatile
   366   000940  0012               	return		;funcret
   367   000942                     __end_of_Timer0_Init:
   368                           	callstack 0
   369                           
   370 ;; *************** function _Hex_to_bcd *****************
   371 ;; Defined at:
   372 ;;		line 39 in file "seven_segment_multiplexer.c"
   373 ;; Parameters:    Size  Location     Type
   374 ;;  count           2   13[COMRAM] unsigned int 
   375 ;;  BCDNum          2   15[COMRAM] PTR unsigned char 
   376 ;;		 -> BCDNum(4), 
   377 ;; Auto vars:     Size  Location     Type
   378 ;;  i               2   17[COMRAM] unsigned int 
   379 ;; Return value:  Size  Location     Type
   380 ;;                  1    wreg      void 
   381 ;; Registers used:
   382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   383 ;; Tracked objects:
   384 ;;		On entry : 0/0
   385 ;;		On exit  : 0/0
   386 ;;		Unchanged: 0/0
   387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   388 ;;      Params:         4       0       0       0       0       0       0
   389 ;;      Locals:         2       0       0       0       0       0       0
   390 ;;      Temps:          0       0       0       0       0       0       0
   391 ;;      Totals:         6       0       0       0       0       0       0
   392 ;;Total ram usage:        6 bytes
   393 ;; Hardware stack levels used: 1
   394 ;; Hardware stack levels required when called: 3
   395 ;; This function calls:
   396 ;;		___lwdiv
   397 ;;		___lwmod
   398 ;; This function is called by:
   399 ;;		_main
   400 ;; This function uses a non-reentrant model
   401 ;;
   402                           
   403                           	psect	text2
   404   00060C                     __ptext2:
   405                           	callstack 0
   406   00060C                     _Hex_to_bcd:
   407                           	callstack 27
   408   00060C                     
   409                           ;seven_segment_multiplexer.c: 42:     BCDNum[0] = (unsigned char)(count/0x3E8);
   410   00060C  C00E  F007         	movff	Hex_to_bcd@count,___lwdiv@dividend
   411   000610  C00F  F008         	movff	Hex_to_bcd@count+1,___lwdiv@dividend+1
   412   000614  0E03               	movlw	3
   413   000616  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   414   000618  0EE8               	movlw	232
   415   00061A  6E09               	movwf	___lwdiv@divisor^0,c
   416   00061C  ECD3  F003         	call	___lwdiv	;wreg free
   417   000620  5007               	movf	?___lwdiv^0,w,c
   418   000622  C010  FFD9         	movff	Hex_to_bcd@BCDNum,fsr2l
   419   000626  C011  FFDA         	movff	Hex_to_bcd@BCDNum+1,fsr2h
   420   00062A  6EDF               	movwf	indf2,c
   421   00062C                     
   422                           ;seven_segment_multiplexer.c: 43:     i = count % 0x3E8;
   423   00062C  C00E  F007         	movff	Hex_to_bcd@count,___lwmod@dividend
   424   000630  C00F  F008         	movff	Hex_to_bcd@count+1,___lwmod@dividend+1
   425   000634  0E03               	movlw	3
   426   000636  6E0A               	movwf	(___lwmod@divisor+1)^0,c
   427   000638  0EE8               	movlw	232
   428   00063A  6E09               	movwf	___lwmod@divisor^0,c
   429   00063C  EC3F  F004         	call	___lwmod	;wreg free
   430   000640  C007  F012         	movff	?___lwmod,Hex_to_bcd@i
   431   000644  C008  F013         	movff	?___lwmod+1,Hex_to_bcd@i+1
   432   000648                     
   433                           ;seven_segment_multiplexer.c: 44:     BCDNum[1] = (unsigned char)(i/0x64);
   434   000648  EE20 F001          	lfsr	2,1
   435   00064C  5010               	movf	Hex_to_bcd@BCDNum^0,w,c
   436   00064E  26D9               	addwf	fsr2l,f,c
   437   000650  5011               	movf	(Hex_to_bcd@BCDNum+1)^0,w,c
   438   000652  22DA               	addwfc	fsr2h,f,c
   439   000654  C012  F007         	movff	Hex_to_bcd@i,___lwdiv@dividend
   440   000658  C013  F008         	movff	Hex_to_bcd@i+1,___lwdiv@dividend+1
   441   00065C  0E00               	movlw	0
   442   00065E  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   443   000660  0E64               	movlw	100
   444   000662  6E09               	movwf	___lwdiv@divisor^0,c
   445   000664  ECD3  F003         	call	___lwdiv	;wreg free
   446   000668  5007               	movf	?___lwdiv^0,w,c
   447   00066A  6EDF               	movwf	indf2,c
   448   00066C                     
   449                           ;seven_segment_multiplexer.c: 45:     i = i % 0x64;
   450   00066C  C012  F007         	movff	Hex_to_bcd@i,___lwmod@dividend
   451   000670  C013  F008         	movff	Hex_to_bcd@i+1,___lwmod@dividend+1
   452   000674  0E00               	movlw	0
   453   000676  6E0A               	movwf	(___lwmod@divisor+1)^0,c
   454   000678  0E64               	movlw	100
   455   00067A  6E09               	movwf	___lwmod@divisor^0,c
   456   00067C  EC3F  F004         	call	___lwmod	;wreg free
   457   000680  C007  F012         	movff	?___lwmod,Hex_to_bcd@i
   458   000684  C008  F013         	movff	?___lwmod+1,Hex_to_bcd@i+1
   459   000688                     
   460                           ;seven_segment_multiplexer.c: 46:     BCDNum[2] = (unsigned char)(i/0x0A);
   461   000688  EE20 F002          	lfsr	2,2
   462   00068C  5010               	movf	Hex_to_bcd@BCDNum^0,w,c
   463   00068E  26D9               	addwf	fsr2l,f,c
   464   000690  5011               	movf	(Hex_to_bcd@BCDNum+1)^0,w,c
   465   000692  22DA               	addwfc	fsr2h,f,c
   466   000694  C012  F007         	movff	Hex_to_bcd@i,___lwdiv@dividend
   467   000698  C013  F008         	movff	Hex_to_bcd@i+1,___lwdiv@dividend+1
   468   00069C  0E00               	movlw	0
   469   00069E  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   470   0006A0  0E0A               	movlw	10
   471   0006A2  6E09               	movwf	___lwdiv@divisor^0,c
   472   0006A4  ECD3  F003         	call	___lwdiv	;wreg free
   473   0006A8  5007               	movf	?___lwdiv^0,w,c
   474   0006AA  6EDF               	movwf	indf2,c
   475   0006AC                     
   476                           ;seven_segment_multiplexer.c: 47:     i = i % 0x0A;
   477   0006AC  C012  F007         	movff	Hex_to_bcd@i,___lwmod@dividend
   478   0006B0  C013  F008         	movff	Hex_to_bcd@i+1,___lwmod@dividend+1
   479   0006B4  0E00               	movlw	0
   480   0006B6  6E0A               	movwf	(___lwmod@divisor+1)^0,c
   481   0006B8  0E0A               	movlw	10
   482   0006BA  6E09               	movwf	___lwmod@divisor^0,c
   483   0006BC  EC3F  F004         	call	___lwmod	;wreg free
   484   0006C0  C007  F012         	movff	?___lwmod,Hex_to_bcd@i
   485   0006C4  C008  F013         	movff	?___lwmod+1,Hex_to_bcd@i+1
   486   0006C8                     
   487                           ;seven_segment_multiplexer.c: 48:     BCDNum[3] = (unsigned char)(i/0x01);
   488   0006C8  EE20 F003          	lfsr	2,3
   489   0006CC  5010               	movf	Hex_to_bcd@BCDNum^0,w,c
   490   0006CE  26D9               	addwf	fsr2l,f,c
   491   0006D0  5011               	movf	(Hex_to_bcd@BCDNum+1)^0,w,c
   492   0006D2  22DA               	addwfc	fsr2h,f,c
   493   0006D4  C012  FFDF         	movff	Hex_to_bcd@i,indf2
   494   0006D8  0012               	return		;funcret
   495   0006DA                     __end_of_Hex_to_bcd:
   496                           	callstack 0
   497                           
   498 ;; *************** function ___lwmod *****************
   499 ;; Defined at:
   500 ;;		line 7 in file "D:\mx_lab\compiler\pic\sources\c99\common\lwmod.c"
   501 ;; Parameters:    Size  Location     Type
   502 ;;  dividend        2    6[COMRAM] unsigned int 
   503 ;;  divisor         2    8[COMRAM] unsigned int 
   504 ;; Auto vars:     Size  Location     Type
   505 ;;  counter         1   10[COMRAM] unsigned char 
   506 ;; Return value:  Size  Location     Type
   507 ;;                  2    6[COMRAM] unsigned int 
   508 ;; Registers used:
   509 ;;		wreg, status,2, status,0
   510 ;; Tracked objects:
   511 ;;		On entry : 0/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   515 ;;      Params:         4       0       0       0       0       0       0
   516 ;;      Locals:         1       0       0       0       0       0       0
   517 ;;      Temps:          0       0       0       0       0       0       0
   518 ;;      Totals:         5       0       0       0       0       0       0
   519 ;;Total ram usage:        5 bytes
   520 ;; Hardware stack levels used: 1
   521 ;; Hardware stack levels required when called: 2
   522 ;; This function calls:
   523 ;;		Nothing
   524 ;; This function is called by:
   525 ;;		_Hex_to_bcd
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529                           	psect	text3
   530   00087E                     __ptext3:
   531                           	callstack 0
   532   00087E                     ___lwmod:
   533                           	callstack 27
   534   00087E  5009               	movf	___lwmod@divisor^0,w,c
   535   000880  100A               	iorwf	(___lwmod@divisor+1)^0,w,c
   536   000882  B4D8               	btfsc	status,2,c
   537   000884  EF46  F004         	goto	u131
   538   000888  EF48  F004         	goto	u130
   539   00088C                     u131:
   540   00088C  EF6C  F004         	goto	l568
   541   000890                     u130:
   542   000890  0E01               	movlw	1
   543   000892  6E0B               	movwf	___lwmod@counter^0,c
   544   000894  EF50  F004         	goto	l896
   545   000898                     l894:
   546   000898  90D8               	bcf	status,0,c
   547   00089A  3609               	rlcf	___lwmod@divisor^0,f,c
   548   00089C  360A               	rlcf	(___lwmod@divisor+1)^0,f,c
   549   00089E  2A0B               	incf	___lwmod@counter^0,f,c
   550   0008A0                     l896:
   551   0008A0  AE0A               	btfss	(___lwmod@divisor+1)^0,7,c
   552   0008A2  EF55  F004         	goto	u141
   553   0008A6  EF57  F004         	goto	u140
   554   0008AA                     u141:
   555   0008AA  EF4C  F004         	goto	l894
   556   0008AE                     u140:
   557   0008AE                     l898:
   558   0008AE  5009               	movf	___lwmod@divisor^0,w,c
   559   0008B0  5C07               	subwf	___lwmod@dividend^0,w,c
   560   0008B2  500A               	movf	(___lwmod@divisor+1)^0,w,c
   561   0008B4  5808               	subwfb	(___lwmod@dividend+1)^0,w,c
   562   0008B6  A0D8               	btfss	status,0,c
   563   0008B8  EF60  F004         	goto	u151
   564   0008BC  EF62  F004         	goto	u150
   565   0008C0                     u151:
   566   0008C0  EF66  F004         	goto	l902
   567   0008C4                     u150:
   568   0008C4  5009               	movf	___lwmod@divisor^0,w,c
   569   0008C6  5E07               	subwf	___lwmod@dividend^0,f,c
   570   0008C8  500A               	movf	(___lwmod@divisor+1)^0,w,c
   571   0008CA  5A08               	subwfb	(___lwmod@dividend+1)^0,f,c
   572   0008CC                     l902:
   573   0008CC  90D8               	bcf	status,0,c
   574   0008CE  320A               	rrcf	(___lwmod@divisor+1)^0,f,c
   575   0008D0  3209               	rrcf	___lwmod@divisor^0,f,c
   576   0008D2  2E0B               	decfsz	___lwmod@counter^0,f,c
   577   0008D4  EF57  F004         	goto	l898
   578   0008D8                     l568:
   579   0008D8  C007  F007         	movff	___lwmod@dividend,?___lwmod
   580   0008DC  C008  F008         	movff	___lwmod@dividend+1,?___lwmod+1
   581   0008E0  0012               	return		;funcret
   582   0008E2                     __end_of___lwmod:
   583                           	callstack 0
   584                           
   585 ;; *************** function ___lwdiv *****************
   586 ;; Defined at:
   587 ;;		line 7 in file "D:\mx_lab\compiler\pic\sources\c99\common\lwdiv.c"
   588 ;; Parameters:    Size  Location     Type
   589 ;;  dividend        2    6[COMRAM] unsigned int 
   590 ;;  divisor         2    8[COMRAM] unsigned int 
   591 ;; Auto vars:     Size  Location     Type
   592 ;;  quotient        2   10[COMRAM] unsigned int 
   593 ;;  counter         1   12[COMRAM] unsigned char 
   594 ;; Return value:  Size  Location     Type
   595 ;;                  2    6[COMRAM] unsigned int 
   596 ;; Registers used:
   597 ;;		wreg, status,2, status,0
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   603 ;;      Params:         4       0       0       0       0       0       0
   604 ;;      Locals:         3       0       0       0       0       0       0
   605 ;;      Temps:          0       0       0       0       0       0       0
   606 ;;      Totals:         7       0       0       0       0       0       0
   607 ;;Total ram usage:        7 bytes
   608 ;; Hardware stack levels used: 1
   609 ;; Hardware stack levels required when called: 2
   610 ;; This function calls:
   611 ;;		Nothing
   612 ;; This function is called by:
   613 ;;		_Hex_to_bcd
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617                           	psect	text4
   618   0007A6                     __ptext4:
   619                           	callstack 0
   620   0007A6                     ___lwdiv:
   621                           	callstack 27
   622   0007A6  0E00               	movlw	0
   623   0007A8  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
   624   0007AA  0E00               	movlw	0
   625   0007AC  6E0B               	movwf	___lwdiv@quotient^0,c
   626   0007AE  5009               	movf	___lwdiv@divisor^0,w,c
   627   0007B0  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
   628   0007B2  B4D8               	btfsc	status,2,c
   629   0007B4  EFDE  F003         	goto	u101
   630   0007B8  EFE0  F003         	goto	u100
   631   0007BC                     u101:
   632   0007BC  EF08  F004         	goto	l558
   633   0007C0                     u100:
   634   0007C0  0E01               	movlw	1
   635   0007C2  6E0D               	movwf	___lwdiv@counter^0,c
   636   0007C4  EFE8  F003         	goto	l876
   637   0007C8                     l874:
   638   0007C8  90D8               	bcf	status,0,c
   639   0007CA  3609               	rlcf	___lwdiv@divisor^0,f,c
   640   0007CC  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
   641   0007CE  2A0D               	incf	___lwdiv@counter^0,f,c
   642   0007D0                     l876:
   643   0007D0  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
   644   0007D2  EFED  F003         	goto	u111
   645   0007D6  EFEF  F003         	goto	u110
   646   0007DA                     u111:
   647   0007DA  EFE4  F003         	goto	l874
   648   0007DE                     u110:
   649   0007DE                     l878:
   650   0007DE  90D8               	bcf	status,0,c
   651   0007E0  360B               	rlcf	___lwdiv@quotient^0,f,c
   652   0007E2  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
   653   0007E4  5009               	movf	___lwdiv@divisor^0,w,c
   654   0007E6  5C07               	subwf	___lwdiv@dividend^0,w,c
   655   0007E8  500A               	movf	(___lwdiv@divisor+1)^0,w,c
   656   0007EA  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
   657   0007EC  A0D8               	btfss	status,0,c
   658   0007EE  EFFB  F003         	goto	u121
   659   0007F2  EFFD  F003         	goto	u120
   660   0007F6                     u121:
   661   0007F6  EF02  F004         	goto	l886
   662   0007FA                     u120:
   663   0007FA  5009               	movf	___lwdiv@divisor^0,w,c
   664   0007FC  5E07               	subwf	___lwdiv@dividend^0,f,c
   665   0007FE  500A               	movf	(___lwdiv@divisor+1)^0,w,c
   666   000800  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
   667   000802  800B               	bsf	___lwdiv@quotient^0,0,c
   668   000804                     l886:
   669   000804  90D8               	bcf	status,0,c
   670   000806  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
   671   000808  3209               	rrcf	___lwdiv@divisor^0,f,c
   672   00080A  2E0D               	decfsz	___lwdiv@counter^0,f,c
   673   00080C  EFEF  F003         	goto	l878
   674   000810                     l558:
   675   000810  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
   676   000814  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
   677   000818  0012               	return		;funcret
   678   00081A                     __end_of___lwdiv:
   679                           	callstack 0
   680                           
   681 ;; *************** function _GPIO_Init *****************
   682 ;; Defined at:
   683 ;;		line 33 in file "seven_segment_multiplexer.c"
   684 ;; Parameters:    Size  Location     Type
   685 ;;		None
   686 ;; Auto vars:     Size  Location     Type
   687 ;;		None
   688 ;; Return value:  Size  Location     Type
   689 ;;                  1    wreg      void 
   690 ;; Registers used:
   691 ;;		wreg, status,2
   692 ;; Tracked objects:
   693 ;;		On entry : 0/0
   694 ;;		On exit  : 0/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   697 ;;      Params:         0       0       0       0       0       0       0
   698 ;;      Locals:         0       0       0       0       0       0       0
   699 ;;      Temps:          0       0       0       0       0       0       0
   700 ;;      Totals:         0       0       0       0       0       0       0
   701 ;;Total ram usage:        0 bytes
   702 ;; Hardware stack levels used: 1
   703 ;; Hardware stack levels required when called: 2
   704 ;; This function calls:
   705 ;;		Nothing
   706 ;; This function is called by:
   707 ;;		_main
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           	psect	text5
   712   00095C                     __ptext5:
   713                           	callstack 0
   714   00095C                     _GPIO_Init:
   715                           	callstack 28
   716   00095C                     
   717                           ;seven_segment_multiplexer.c: 35:     ADCON1 = 0x0F;
   718   00095C  0E0F               	movlw	15
   719   00095E  6EC1               	movwf	193,c	;volatile
   720                           
   721                           ;seven_segment_multiplexer.c: 36:     TRISD = 0x00;
   722   000960  0E00               	movlw	0
   723   000962  6E95               	movwf	149,c	;volatile
   724                           
   725                           ;seven_segment_multiplexer.c: 37:     TRISA = 0xF0;
   726   000964  0EF0               	movlw	240
   727   000966  6E92               	movwf	146,c	;volatile
   728   000968  0012               	return		;funcret
   729   00096A                     __end_of_GPIO_Init:
   730                           	callstack 0
   731                           
   732 ;; *************** function _seg_display *****************
   733 ;; Defined at:
   734 ;;		line 78 in file "seven_segment_multiplexer.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;		None
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      void 
   741 ;; Registers used:
   742 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   748 ;;      Params:         0       0       0       0       0       0       0
   749 ;;      Locals:         0       0       0       0       0       0       0
   750 ;;      Temps:          4       0       0       0       0       0       0
   751 ;;      Totals:         4       0       0       0       0       0       0
   752 ;;Total ram usage:        4 bytes
   753 ;; Hardware stack levels used: 1
   754 ;; Hardware stack levels required when called: 1
   755 ;; This function calls:
   756 ;;		_seg_multi
   757 ;; This function is called by:
   758 ;;		Interrupt level 2
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	intcode
   763   000008                     __pintcode:
   764                           	callstack 0
   765   000008                     _seg_display:
   766                           	callstack 27
   767                           
   768                           ;incstack = 0
   769   000008  821E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   770   00000A  ED71  F004         	call	int_func,f	;refresh shadow registers
   771                           
   772                           	psect	intcode_body
   773   0008E2                     __pintcode_body:
   774                           	callstack 27
   775   0008E2                     int_func:
   776                           	callstack 27
   777   0008E2  0006               	pop		; remove dummy address from shadow register refresh
   778   0008E4  CFF6 F003          	movff	tblptrl,??_seg_display
   779   0008E8  CFF7 F004          	movff	tblptrh,??_seg_display+1
   780   0008EC  CFF8 F005          	movff	tblptru,??_seg_display+2
   781   0008F0  CFF5 F006          	movff	tablat,??_seg_display+3
   782   0008F4                     
   783                           ;seven_segment_multiplexer.c: 80:     if(INTCONbits.TMR0IF)
   784   0008F4  A4F2               	btfss	242,2,c	;volatile
   785   0008F6  EF7F  F004         	goto	i2u8_41
   786   0008FA  EF81  F004         	goto	i2u8_40
   787   0008FE                     i2u8_41:
   788   0008FE  EF88  F004         	goto	i2l55
   789   000902                     i2u8_40:
   790   000902                     
   791                           ;seven_segment_multiplexer.c: 81:     {;seven_segment_multiplexer.c: 82:         INTCONb
      +                          its.TMR0IF=0;
   792   000902  94F2               	bcf	242,2,c	;volatile
   793   000904                     
   794                           ;seven_segment_multiplexer.c: 83:         TMR0H = 0xcf;
   795   000904  0ECF               	movlw	207
   796   000906  6ED7               	movwf	215,c	;volatile
   797                           
   798                           ;seven_segment_multiplexer.c: 84:         TMR0L = 0x2b;
   799   000908  0E2B               	movlw	43
   800   00090A  6ED6               	movwf	214,c	;volatile
   801   00090C                     
   802                           ;seven_segment_multiplexer.c: 85:         seg_multi();
   803   00090C  EC6D  F003         	call	_seg_multi	;wreg free
   804   000910                     i2l55:
   805   000910  C006  FFF5         	movff	??_seg_display+3,tablat
   806   000914  C005  FFF8         	movff	??_seg_display+2,tblptru
   807   000918  C004  FFF7         	movff	??_seg_display+1,tblptrh
   808   00091C  C003  FFF6         	movff	??_seg_display,tblptrl
   809   000920  921E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   810   000922  0011               	retfie		f
   811   000924                     __end_of_seg_display:
   812                           	callstack 0
   813                           
   814 ;; *************** function _seg_multi *****************
   815 ;; Defined at:
   816 ;;		line 52 in file "seven_segment_multiplexer.c"
   817 ;; Parameters:    Size  Location     Type
   818 ;;		None
   819 ;; Auto vars:     Size  Location     Type
   820 ;;		None
   821 ;; Return value:  Size  Location     Type
   822 ;;                  1    wreg      void 
   823 ;; Registers used:
   824 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   825 ;; Tracked objects:
   826 ;;		On entry : 0/0
   827 ;;		On exit  : 0/0
   828 ;;		Unchanged: 0/0
   829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   830 ;;      Params:         0       0       0       0       0       0       0
   831 ;;      Locals:         0       0       0       0       0       0       0
   832 ;;      Temps:          2       0       0       0       0       0       0
   833 ;;      Totals:         2       0       0       0       0       0       0
   834 ;;Total ram usage:        2 bytes
   835 ;; Hardware stack levels used: 1
   836 ;; This function calls:
   837 ;;		Nothing
   838 ;; This function is called by:
   839 ;;		_seg_display
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           	psect	text7
   844   0006DA                     __ptext7:
   845                           	callstack 0
   846   0006DA                     _seg_multi:
   847                           	callstack 27
   848   0006DA                     
   849                           ;seven_segment_multiplexer.c: 55:     switch(val)
   850   0006DA  EFA3  F003         	goto	i2l830
   851   0006DE                     i2l812:
   852                           
   853                           ;seven_segment_multiplexer.c: 58:             PORTD = seg_data[BCDNum[0]];
   854   0006DE  0E01               	movlw	low _seg_data
   855   0006E0  241A               	addwf	_BCDNum^0,w,c
   856   0006E2  6EF6               	movwf	tblptrl,c
   857   0006E4  6AF7               	clrf	tblptrh,c
   858   0006E6  0E06               	movlw	high _seg_data
   859   0006E8  22F7               	addwfc	tblptrh,f,c
   860   0006EA                     	if	0	;There are less than 3 active tblptr bytes
   861   0006EA                     	endif
   862   0006EA  0008               	tblrd		*
   863   0006EC  CFF5 FF83          	movff	tablat,3971	;volatile
   864   0006F0                     
   865                           ;seven_segment_multiplexer.c: 59:             PORTA = 0x01;
   866   0006F0  0E01               	movlw	1
   867   0006F2  6E80               	movwf	128,c	;volatile
   868                           
   869                           ;seven_segment_multiplexer.c: 60:             break;
   870   0006F4  EFC1  F003         	goto	i2l832
   871   0006F8                     i2l816:
   872                           
   873                           ;seven_segment_multiplexer.c: 62:             PORTD = seg_data[BCDNum[1]];
   874   0006F8  0E01               	movlw	low _seg_data
   875   0006FA  241B               	addwf	(_BCDNum+1)^0,w,c
   876   0006FC  6EF6               	movwf	tblptrl,c
   877   0006FE  6AF7               	clrf	tblptrh,c
   878   000700  0E06               	movlw	high _seg_data
   879   000702  22F7               	addwfc	tblptrh,f,c
   880   000704                     	if	0	;There are less than 3 active tblptr bytes
   881   000704                     	endif
   882   000704  0008               	tblrd		*
   883   000706  CFF5 FF83          	movff	tablat,3971	;volatile
   884   00070A                     
   885                           ;seven_segment_multiplexer.c: 63:             PORTA = 0x02;
   886   00070A  0E02               	movlw	2
   887   00070C  6E80               	movwf	128,c	;volatile
   888                           
   889                           ;seven_segment_multiplexer.c: 64:             break;
   890   00070E  EFC1  F003         	goto	i2l832
   891   000712                     i2l820:
   892                           
   893                           ;seven_segment_multiplexer.c: 66:             PORTD = seg_data[BCDNum[2]];
   894   000712  0E01               	movlw	low _seg_data
   895   000714  241C               	addwf	(_BCDNum+2)^0,w,c
   896   000716  6EF6               	movwf	tblptrl,c
   897   000718  6AF7               	clrf	tblptrh,c
   898   00071A  0E06               	movlw	high _seg_data
   899   00071C  22F7               	addwfc	tblptrh,f,c
   900   00071E                     	if	0	;There are less than 3 active tblptr bytes
   901   00071E                     	endif
   902   00071E  0008               	tblrd		*
   903   000720  CFF5 FF83          	movff	tablat,3971	;volatile
   904   000724                     
   905                           ;seven_segment_multiplexer.c: 67:             PORTA = 0x04;
   906   000724  0E04               	movlw	4
   907   000726  6E80               	movwf	128,c	;volatile
   908                           
   909                           ;seven_segment_multiplexer.c: 68:             break;
   910   000728  EFC1  F003         	goto	i2l832
   911   00072C                     i2l824:
   912                           
   913                           ;seven_segment_multiplexer.c: 70:             PORTD = seg_data[BCDNum[3]];
   914   00072C  0E01               	movlw	low _seg_data
   915   00072E  241D               	addwf	(_BCDNum+3)^0,w,c
   916   000730  6EF6               	movwf	tblptrl,c
   917   000732  6AF7               	clrf	tblptrh,c
   918   000734  0E06               	movlw	high _seg_data
   919   000736  22F7               	addwfc	tblptrh,f,c
   920   000738                     	if	0	;There are less than 3 active tblptr bytes
   921   000738                     	endif
   922   000738  0008               	tblrd		*
   923   00073A  CFF5 FF83          	movff	tablat,3971	;volatile
   924   00073E                     
   925                           ;seven_segment_multiplexer.c: 71:             PORTA = 0x08;
   926   00073E  0E08               	movlw	8
   927   000740  6E80               	movwf	128,c	;volatile
   928                           
   929                           ;seven_segment_multiplexer.c: 72:             break;
   930   000742  EFC1  F003         	goto	i2l832
   931   000746                     i2l830:
   932   000746  C016  F001         	movff	_val,??_seg_multi
   933   00074A  C017  F002         	movff	_val+1,??_seg_multi+1
   934                           
   935                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   936                           ; Switch size 1, requested type "simple"
   937                           ; Number of cases is 1, Range of values is 0 to 0
   938                           ; switch strategies available:
   939                           ; Name         Instructions Cycles
   940                           ; simple_byte            4     3 (average)
   941                           ;	Chosen strategy is simple_byte
   942   00074E  5002               	movf	(??_seg_multi+1)^0,w,c
   943   000750  0A00               	xorlw	0	; case 0
   944   000752  B4D8               	btfsc	status,2,c
   945   000754  EFAE  F003         	goto	i2l940
   946   000758  EFC1  F003         	goto	i2l832
   947   00075C                     i2l940:
   948                           
   949                           ; Switch size 1, requested type "simple"
   950                           ; Number of cases is 4, Range of values is 0 to 3
   951                           ; switch strategies available:
   952                           ; Name         Instructions Cycles
   953                           ; simple_byte           13     7 (average)
   954                           ;	Chosen strategy is simple_byte
   955   00075C  5001               	movf	??_seg_multi^0,w,c
   956   00075E  0A00               	xorlw	0	; case 0
   957   000760  B4D8               	btfsc	status,2,c
   958   000762  EF6F  F003         	goto	i2l812
   959   000766  0A01               	xorlw	1	; case 1
   960   000768  B4D8               	btfsc	status,2,c
   961   00076A  EF7C  F003         	goto	i2l816
   962   00076E  0A03               	xorlw	3	; case 2
   963   000770  B4D8               	btfsc	status,2,c
   964   000772  EF89  F003         	goto	i2l820
   965   000776  0A01               	xorlw	1	; case 3
   966   000778  B4D8               	btfsc	status,2,c
   967   00077A  EF96  F003         	goto	i2l824
   968   00077E  EFC1  F003         	goto	i2l832
   969   000782                     i2l832:
   970                           
   971                           ;seven_segment_multiplexer.c: 74:     val++;
   972   000782  4A16               	infsnz	_val^0,f,c
   973   000784  2A17               	incf	(_val+1)^0,f,c
   974   000786                     
   975                           ;seven_segment_multiplexer.c: 75:     if(val>3)
   976   000786  5017               	movf	(_val+1)^0,w,c
   977   000788  E109               	bnz	i2u7_40
   978   00078A  0E04               	movlw	4
   979   00078C  5C16               	subwf	_val^0,w,c
   980   00078E  A0D8               	btfss	status,0,c
   981   000790  EFCC  F003         	goto	i2u7_41
   982   000794  EFCE  F003         	goto	i2u7_40
   983   000798                     i2u7_41:
   984   000798  EFD2  F003         	goto	i2l49
   985   00079C                     i2u7_40:
   986   00079C                     
   987                           ;seven_segment_multiplexer.c: 76:         val = 0;
   988   00079C  0E00               	movlw	0
   989   00079E  6E17               	movwf	(_val+1)^0,c
   990   0007A0  0E00               	movlw	0
   991   0007A2  6E16               	movwf	_val^0,c
   992   0007A4                     i2l49:
   993   0007A4  0012               	return		;funcret
   994   0007A6                     __end_of_seg_multi:
   995                           	callstack 0
   996                           
   997                           	psect	rparam
   998   000000                     
   999                           	psect	temp
  1000   00001E                     btemp:
  1001                           	callstack 0
  1002   00001E                     	ds	1
  1003   000000                     int$flags	set	btemp
  1004   000000                     wtemp8	set	btemp+1
  1005   000000                     ttemp5	set	btemp+1
  1006   000000                     ttemp6	set	btemp+4
  1007   000000                     ttemp7	set	btemp+8
  1008                           
  1009                           	psect	idloc
  1010                           
  1011                           ;Config register IDLOC0 @ 0x200000
  1012                           ;	unspecified, using default values
  1013   200000                     	org	2097152
  1014   200000  FF                 	db	255
  1015                           
  1016                           ;Config register IDLOC1 @ 0x200001
  1017                           ;	unspecified, using default values
  1018   200001                     	org	2097153
  1019   200001  FF                 	db	255
  1020                           
  1021                           ;Config register IDLOC2 @ 0x200002
  1022                           ;	unspecified, using default values
  1023   200002                     	org	2097154
  1024   200002  FF                 	db	255
  1025                           
  1026                           ;Config register IDLOC3 @ 0x200003
  1027                           ;	unspecified, using default values
  1028   200003                     	org	2097155
  1029   200003  FF                 	db	255
  1030                           
  1031                           ;Config register IDLOC4 @ 0x200004
  1032                           ;	unspecified, using default values
  1033   200004                     	org	2097156
  1034   200004  FF                 	db	255
  1035                           
  1036                           ;Config register IDLOC5 @ 0x200005
  1037                           ;	unspecified, using default values
  1038   200005                     	org	2097157
  1039   200005  FF                 	db	255
  1040                           
  1041                           ;Config register IDLOC6 @ 0x200006
  1042                           ;	unspecified, using default values
  1043   200006                     	org	2097158
  1044   200006  FF                 	db	255
  1045                           
  1046                           ;Config register IDLOC7 @ 0x200007
  1047                           ;	unspecified, using default values
  1048   200007                     	org	2097159
  1049   200007  FF                 	db	255
  1050                           
  1051                           	psect	config
  1052                           
  1053                           ; Padding undefined space
  1054   300000                     	org	3145728
  1055   300000  FF                 	db	255
  1056                           
  1057                           ;Config register CONFIG1H @ 0x300001
  1058                           ;	Oscillator Selection bits
  1059                           ;	OSC = HS, HS oscillator
  1060                           ;	Fail-Safe Clock Monitor Enable bit
  1061                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1062                           ;	Internal/External Oscillator Switchover bit
  1063                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1064   300001                     	org	3145729
  1065   300001  02                 	db	2
  1066                           
  1067                           ;Config register CONFIG2L @ 0x300002
  1068                           ;	Power-up Timer Enable bit
  1069                           ;	PWRT = OFF, PWRT disabled
  1070                           ;	Brown-out Reset Enable bits
  1071                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1072                           ;	Brown Out Reset Voltage bits
  1073                           ;	BORV = 3, Minimum setting
  1074   300002                     	org	3145730
  1075   300002  1F                 	db	31
  1076                           
  1077                           ;Config register CONFIG2H @ 0x300003
  1078                           ;	Watchdog Timer Enable bit
  1079                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1080                           ;	Watchdog Timer Postscale Select bits
  1081                           ;	WDTPS = 32768, 1:32768
  1082   300003                     	org	3145731
  1083   300003  1E                 	db	30
  1084                           
  1085                           ; Padding undefined space
  1086   300004                     	org	3145732
  1087   300004  FF                 	db	255
  1088                           
  1089                           ;Config register CONFIG3H @ 0x300005
  1090                           ;	CCP2 MUX bit
  1091                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1092                           ;	PORTB A/D Enable bit
  1093                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1094                           ;	Low-Power Timer1 Oscillator Enable bit
  1095                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1096                           ;	MCLR Pin Enable bit
  1097                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  1098   300005                     	org	3145733
  1099   300005  01                 	db	1
  1100                           
  1101                           ;Config register CONFIG4L @ 0x300006
  1102                           ;	Stack Full/Underflow Reset Enable bit
  1103                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1104                           ;	Single-Supply ICSP Enable bit
  1105                           ;	LVP = OFF, Single-Supply ICSP disabled
  1106                           ;	Extended Instruction Set Enable bit
  1107                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1108                           ;	Background Debugger Enable bit
  1109                           ;	DEBUG = 0x1, unprogrammed default
  1110   300006                     	org	3145734
  1111   300006  81                 	db	129
  1112                           
  1113                           ; Padding undefined space
  1114   300007                     	org	3145735
  1115   300007  FF                 	db	255
  1116                           
  1117                           ;Config register CONFIG5L @ 0x300008
  1118                           ;	Code Protection bit
  1119                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1120                           ;	Code Protection bit
  1121                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1122                           ;	Code Protection bit
  1123                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1124                           ;	Code Protection bit
  1125                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1126   300008                     	org	3145736
  1127   300008  0F                 	db	15
  1128                           
  1129                           ;Config register CONFIG5H @ 0x300009
  1130                           ;	Boot Block Code Protection bit
  1131                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1132                           ;	Data EEPROM Code Protection bit
  1133                           ;	CPD = OFF, Data EEPROM not code-protected
  1134   300009                     	org	3145737
  1135   300009  C0                 	db	192
  1136                           
  1137                           ;Config register CONFIG6L @ 0x30000A
  1138                           ;	Write Protection bit
  1139                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1140                           ;	Write Protection bit
  1141                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1142                           ;	Write Protection bit
  1143                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1144                           ;	Write Protection bit
  1145                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1146   30000A                     	org	3145738
  1147   30000A  0F                 	db	15
  1148                           
  1149                           ;Config register CONFIG6H @ 0x30000B
  1150                           ;	Configuration Register Write Protection bit
  1151                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1152                           ;	Boot Block Write Protection bit
  1153                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1154                           ;	Data EEPROM Write Protection bit
  1155                           ;	WRTD = OFF, Data EEPROM not write-protected
  1156   30000B                     	org	3145739
  1157   30000B  E0                 	db	224
  1158                           
  1159                           ;Config register CONFIG7L @ 0x30000C
  1160                           ;	Table Read Protection bit
  1161                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1162                           ;	Table Read Protection bit
  1163                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1164                           ;	Table Read Protection bit
  1165                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1166                           ;	Table Read Protection bit
  1167                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1168   30000C                     	org	3145740
  1169   30000C  0F                 	db	15
  1170                           
  1171                           ;Config register CONFIG7H @ 0x30000D
  1172                           ;	Boot Block Table Read Protection bit
  1173                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1174   30000D                     	org	3145741
  1175   30000D  40                 	db	64
  1176                           tosu	equ	0xFFF
  1177                           tosh	equ	0xFFE
  1178                           tosl	equ	0xFFD
  1179                           stkptr	equ	0xFFC
  1180                           pclatu	equ	0xFFB
  1181                           pclath	equ	0xFFA
  1182                           pcl	equ	0xFF9
  1183                           tblptru	equ	0xFF8
  1184                           tblptrh	equ	0xFF7
  1185                           tblptrl	equ	0xFF6
  1186                           tablat	equ	0xFF5
  1187                           prodh	equ	0xFF4
  1188                           prodl	equ	0xFF3
  1189                           indf0	equ	0xFEF
  1190                           postinc0	equ	0xFEE
  1191                           postdec0	equ	0xFED
  1192                           preinc0	equ	0xFEC
  1193                           plusw0	equ	0xFEB
  1194                           fsr0h	equ	0xFEA
  1195                           fsr0l	equ	0xFE9
  1196                           wreg	equ	0xFE8
  1197                           indf1	equ	0xFE7
  1198                           postinc1	equ	0xFE6
  1199                           postdec1	equ	0xFE5
  1200                           preinc1	equ	0xFE4
  1201                           plusw1	equ	0xFE3
  1202                           fsr1h	equ	0xFE2
  1203                           fsr1l	equ	0xFE1
  1204                           bsr	equ	0xFE0
  1205                           indf2	equ	0xFDF
  1206                           postinc2	equ	0xFDE
  1207                           postdec2	equ	0xFDD
  1208                           preinc2	equ	0xFDC
  1209                           plusw2	equ	0xFDB
  1210                           fsr2h	equ	0xFDA
  1211                           fsr2l	equ	0xFD9
  1212                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    10
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     21      29
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    Hex_to_bcd@BCDNum	PTR unsigned char  size(2) Largest target is 4
		 -> BCDNum(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_Hex_to_bcd
    _Hex_to_bcd->___lwdiv

Critical Paths under _seg_display in COMRAM

    _seg_display->_seg_multi

Critical Paths under _main in BANK0

    None.

Critical Paths under _seg_display in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _seg_display in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _seg_display in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _seg_display in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _seg_display in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _seg_display in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1631
                                             19 COMRAM     2     2      0
                          _GPIO_Init
                         _Hex_to_bcd
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Hex_to_bcd                                           6     2      4    1631
                                             13 COMRAM     6     2      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _GPIO_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _seg_display                                          4     4      0       0
                                              2 COMRAM     4     4      0
                          _seg_multi
 ---------------------------------------------------------------------------------
 (4) _seg_multi                                            2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPIO_Init
   _Hex_to_bcd
     ___lwdiv
     ___lwmod
   _Timer0_Init

 _seg_display (ROOT)
   _seg_multi

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     15      1D       1       23.0%
BITBIGSFRlllh       2B      0       0      20        0.0%
BITBIGSFRhhl        1A      0       0      17        0.0%
BITBIGSFRlllllh      E      0       0      22        0.0%
BITBIGSFRllh         E      0       0      19        0.0%
BITBIGSFRhhh         D      0       0      16        0.0%
BITBIGSFRlh          4      0       0      18        0.0%
BITBIGSFRllllh       2      0       0      21        0.0%
BITBIGSFRllllll      2      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1D      24        0.0%
DATA                 0      0      1D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Dec 14 21:34:21 2022

                     l33 0940                       l36 0968                       l39 06D8  
                    l900 08C4                      l565 0818                      l558 0810  
                    l902 08CC                      l910 062C                      l575 08E0  
                    l904 08D2                      l568 08D8                      l920 06C8  
                    l912 0648                      l914 066C                      l906 060C  
                    l930 0844                      l922 081A                      l916 0688  
                    l908 060C                      l780 092A                      l932 084C  
                    l924 0822                      l870 07AE                      l918 06AC  
                    l790 093E                      l782 0936                      l934 0860  
                    l926 082A                      l792 095C                      l880 07E4  
                    l872 07C0                      l784 0938                      l928 082E  
                    l882 07FA                      l874 07C8                      l890 087E  
                    l786 093A                      l778 0924                      l884 0802  
                    l876 07D0                      l868 07A6                      l892 0890  
                    l788 093C                      l886 0804                      l878 07DE  
                    l894 0898                      l888 080A                      l896 08A0  
                    l898 08AE                      u100 07C0                      u101 07BC  
                    u110 07DE                      u111 07DA                      u120 07FA  
                    u121 07F6                      u130 0890                      u131 088C  
                    u140 08AE                      u141 08AA                      u150 08C4  
                    u151 08C0                      u160 0844                      u161 0840  
                    u177 086A                      _val 0016              Hex_to_bcd@i 0012  
                    wreg 000FE8                     i2l55 0910                     i2l49 07A4  
                   _main 081A                     fsr2h 000FDA                     indf2 000FDF  
                   fsr2l 000FD9                     btemp 001E                     start 000E  
           ___param_bank 000000                    ?_main 0001          __end_of___lwdiv 081A  
        __end_of___lwmod 08E2                    i2l810 06DA                    i2l820 0712  
                  i2l812 06DE                    i2l822 0724                    i2l814 06F0  
                  i2l830 0746                    i2l824 072C                    i2l816 06F8  
                  i2l832 0782                    i2l834 0786                    i2l826 073E  
                  i2l818 070A                    i2l842 08F4                    i2l836 079C  
                  i2l940 075C                    i2l844 0902                    i2l846 0904  
                  i2l848 090C                    _TMR0H 000FD7                    _TMR0L 000FD6  
                  _PORTA 000F80                    _PORTD 000F83                    _TRISA 000F92  
                  _TRISD 000F95                    _count 0018                    tablat 000FF5  
             _Hex_to_bcd 060C                    ttemp5 001F                    ttemp6 0022  
                  ttemp7 0026                    status 000FD8                    wtemp8 001F  
        __initialization 0942             __end_of_main 087E             ?_seg_display 0001  
                 ??_main 0014            __activetblptr 000002        __end_of_GPIO_Init 096A  
                 _ADCON1 000FC1                   _BCDNum 001A                   i2u7_40 079C  
                 i2u7_41 0798                   i2u8_40 0902                   i2u8_41 08FE  
          ??_Timer0_Init 0007                ??___lwdiv 000B                ??___lwmod 000B  
                 clear_0 0948                   isa$std 000001         __end_of_seg_data 060B  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8              ?_Hex_to_bcd 000E               __accesstop 0080  
__end_of__initialization 094E            ___rparam_used 000001           __pcstackCOMRAM 0001  
    __end_of_Timer0_Init 0942                  __Hparam 0000              _Timer0_Init 0924  
                __Lparam 0000                  ___lwdiv 07A6                  ___lwmod 087E  
           __psmallconst 0600                  __pcinit 0942                  __ramtop 0600  
                __ptext0 081A                  __ptext1 0924                  __ptext2 060C  
                __ptext3 087E                  __ptext4 07A6                  __ptext5 095C  
                __ptext7 06DA                _T0CONbits 000FD5                _GPIO_Init 095C  
         __pintcode_body 08E2        __end_of_seg_multi 07A6     end_of_initialization 094E  
          __Lmediumconst 0000                  int_func 08E2          Hex_to_bcd@count 000E  
                postinc0 000FEE               ?_GPIO_Init 0001             ??_Hex_to_bcd 0012  
     __end_of_Hex_to_bcd 06DA      start_initialization 0942              __pbssCOMRAM 0016  
            ??_GPIO_Init 0007             ?_Timer0_Init 0001         ___lwdiv@dividend 0007  
              __pintcode 0008            ??_seg_display 0003                 ?___lwdiv 0007  
               ?___lwmod 0007              __smallconst 0600         ___lwdiv@quotient 000B  
              _seg_multi 06DA                 _RCONbits 000FD0      __end_of_seg_display 0924  
             ?_seg_multi 0001                 __Hrparam 0000                 __Lrparam 0000  
        ___lwdiv@divisor 0009          ___lwdiv@counter 000D                 _seg_data 0601  
               isa$xinst 000000                 int$flags 001E              _seg_display 0008  
             _INTCONbits 000FF2         Hex_to_bcd@BCDNum 0010                 intlevel2 0000  
       ___lwmod@dividend 0007              ??_seg_multi 0001          ___lwmod@divisor 0009  
        ___lwmod@counter 000B  
